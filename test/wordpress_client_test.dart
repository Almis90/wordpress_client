import 'dart:convert';
import 'dart:io';

import 'package:test/test.dart';
import 'package:wordpress_client/wordpress_client.dart';

void main() async {
  WordpressClient client;
  Map<String, dynamic> json;

  json = jsonDecode(await (await File('test/test_settings.json')).readAsString());
  client = WordpressClient(
    json['base_url'],
    json['path'],
    bootstrapper: (builder) => builder
        .withDefaultMaxRedirects(5)
        .withFollowRedirects(true)
        .withRequestTimeout(60)
        .withDefaultAuthorization(
          (authBuilder) => authBuilder.withUserName(json['username']).withPassword(json['password']).withType(AuthorizationType.JWT).build(),
        )
        .build(),
  );
/*
  test('List Posts', () async {
    final response = await client.listPost(
      (builder) => builder.withPerPage(20).withPageNumber(1).build(),
    );

    expect(200, response.responseCode);
    expect(20, response.value.length);
  });

  test('List Tags', () async {
    final response = await client.listTag(
      (builder) => builder.withPerPage(20).withPageNumber(1).build(),
    );

    expect(200, response.responseCode);
    expect(20, response.value.length);
  });

  test('List Category', () async {
    final response = await client.listCategory(
      (builder) => builder.withPerPage(2).withPageNumber(1).build(),
    );

    expect(200, response.responseCode);
    expect(2, response.value.length);
  });

  test('List Media', () async {
    final response = await client.listMedia(
      (builder) => builder.withPerPage(20).withPageNumber(1).build(),
    );

    expect(200, response.responseCode);
    expect(19, response.value.length, reason: 'For some reason, WP API is only returning PER_PAGE - 1 values.');
  });

  test('List Users', () async {
    final response = await client.listUsers(
      (builder) => builder.withPerPage(10).withPageNumber(1).build(),
    );

    expect(200, response.responseCode);
    expect(10, response.value.length);
  });

  test('Retrive Post', () async {
    final response = await client.retrivePost(
      (builder) => builder.withPostId(468894).build(),
    );

    expect(200, response.responseCode);
    expect(468894, response.value.id);
  });
  */

  test('Get Current User', () async {
    final response = await client.retriveMe(
      (builder) => builder.withCallback(Callback(
        requestErrorCallback: (error) {
          print('Error: ' + error.errorResponse.message);
        },
      )).build(),
    );

    expect(200, response.responseCode);
    expect('arunprakash', response.value.slug);
  });

  test(
    'Create Post & Delete Post',
    () async {
      final response = await client.createPost(
        (builder) => builder
            .withCommentStatus(Status.CLOSED)
            .withPingStatus(Status.CLOSED)
            .withFormat(PostFormat.STANDARD)
            .withContent(
                'This a test post generated by an automated script using wordpress_client library. This post will be deleted automatically in short time.')
            .withExcerpt('A test post!')
            .withTitle('Generated Sample Post')
            .withSlug('generated-post-slug')
            .withStatus(ContentStatus.PENDING)
            .withFeaturedMedia(468930)
            .withAuthor(3)
            .withCallback(Callback(
          requestErrorCallback: (error) {
            print('Error: ' + error.errorResponse.message);
          },
        )).build(),
      );

      expect(201, response.responseCode);
      expect('Generated Sample Post', response.value.title.parsedText);
      expect('generated-post-slug', response.value.slug);

      final postId = response.value.id;

      final deleteResponse = await client.deletePost(
        (builder) => builder.withPostId(postId).withCallback(
          Callback(
            requestErrorCallback: (error) {
              print('Error: ' + error.errorResponse.message);
            },
          ),
        ).build(),
      );

      expect(200, deleteResponse.responseCode);
    },
  );
}
